stages:
  - build
  - test
  - database_integration
  - routes_integration
  - end_to_end
  - static_code_scan
  - security_code_scan
  - deploy

# Cache go modules
cache:
  paths:
    - $GOPATH/pkg/mod
    - .cache

# Download go dependencies
before_script:
  - go mod download

build:
  stage: build
  script:
    - go build -v main.go

unit_test:
  stage: test
  script:
    # Verbose test output
    - cd tests/services
    - go test -v ./...
  only:
    - /^feature\/.*/

database_integration_test:
  stage: database_integration
  script:
    - cd tests/integration/repositories
    - go test -v ./...
  only:
    - develop

router_integration_test:
  stage: routes_integration
  script:
    - cd tests/integration/routes
    - go test -v ./...
  only:
    - develop

end_to_end_test:
  stage: end_to_end
  script:
    - cd tests/end-to-end
    - go test -v ./...
  only:
    - acceptance

snyk_code_scan:
  stage: static_code_scan
  script:
    # Install Snyk CLI locally in the project
    - npm install snyk
    # Use local Snyk from node_modules
    - $env:PATH = "$pwd\node_modules\.bin;$env:PATH"
    # Authenticate with Snyk
    - snyk auth $env:SNYK_TOKEN
    # Run Snyk Code (static code analysis)
    - snyk code test --org=beamarro
  allow_failure: false # Pipeline fails if vulnerabilities are found
  only:
    - /^feature\/.*/

snyk_security_scan: # Scans go dependencies for security vulnerabilities
  stage: security_code_scan
  script:
    - npm install snyk
    - $env:PATH = "$pwd\node_modules\.bin;$env:PATH"
    - snyk auth $SNYK_TOKEN
    # Scan Go dependencies
    - snyk test --org=beamarro
  allow_failure: false
  only:
    - /^feature\/.*/
    - develop

deploy:
  stage: deploy
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker build -t "$DOCKER_USERNAME/flyhorizons:booking-service" .
    - docker push "$DOCKER_USERNAME/flyhorizons:booking-service"
  only:
    - main
  environment:
    name: production